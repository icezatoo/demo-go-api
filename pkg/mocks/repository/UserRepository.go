// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	dto "github.com/icezatoo/demo-go-api/pkg/dto/user"
	entities "github.com/icezatoo/demo-go-api/pkg/model"

	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: request
func (_m *UserRepository) CreateUser(request *dto.CreateUserRequest) (*entities.User, error) {
	ret := _m.Called(request)

	var r0 *entities.User
	if rf, ok := ret.Get(0).(func(*dto.CreateUserRequest) *entities.User); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.CreateUserRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: request
func (_m *UserRepository) DeleteUser(request *dto.RequestDeleteUser) error {
	ret := _m.Called(request)

	var r0 error
	if rf, ok := ret.Get(0).(func(*dto.RequestDeleteUser) error); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUser provides a mock function with given fields: request
func (_m *UserRepository) GetUser(request *dto.RequestGetUser) (*entities.User, error) {
	ret := _m.Called(request)

	var r0 *entities.User
	if rf, ok := ret.Get(0).(func(*dto.RequestGetUser) *entities.User); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.RequestGetUser) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsers provides a mock function with given fields:
func (_m *UserRepository) GetUsers() ([]*entities.User, error) {
	ret := _m.Called()

	var r0 []*entities.User
	if rf, ok := ret.Get(0).(func() []*entities.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: request
func (_m *UserRepository) UpdateUser(request *dto.UpdateUserRequest) (*entities.User, error) {
	ret := _m.Called(request)

	var r0 *entities.User
	if rf, ok := ret.Get(0).(func(*dto.UpdateUserRequest) *entities.User); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.UpdateUserRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
