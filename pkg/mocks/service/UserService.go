// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	dto "github.com/icezatoo/demo-go-api/pkg/dto/user"
	mock "github.com/stretchr/testify/mock"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: request
func (_m *UserService) CreateUser(request *dto.CreateUserRequest) (*dto.UserReponse, error) {
	ret := _m.Called(request)

	var r0 *dto.UserReponse
	if rf, ok := ret.Get(0).(func(*dto.CreateUserRequest) *dto.UserReponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.UserReponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.CreateUserRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: request
func (_m *UserService) DeleteUser(request *dto.RequestDeleteUser) error {
	ret := _m.Called(request)

	var r0 error
	if rf, ok := ret.Get(0).(func(*dto.RequestDeleteUser) error); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUser provides a mock function with given fields: request
func (_m *UserService) GetUser(request *dto.RequestGetUser) (*dto.UserReponse, error) {
	ret := _m.Called(request)

	var r0 *dto.UserReponse
	if rf, ok := ret.Get(0).(func(*dto.RequestGetUser) *dto.UserReponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.UserReponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.RequestGetUser) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsers provides a mock function with given fields:
func (_m *UserService) GetUsers() ([]*dto.UserReponse, error) {
	ret := _m.Called()

	var r0 []*dto.UserReponse
	if rf, ok := ret.Get(0).(func() []*dto.UserReponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.UserReponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: request
func (_m *UserService) UpdateUser(request *dto.UpdateUserRequest) (*dto.UserReponse, error) {
	ret := _m.Called(request)

	var r0 *dto.UserReponse
	if rf, ok := ret.Get(0).(func(*dto.UpdateUserRequest) *dto.UserReponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.UserReponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.UpdateUserRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
